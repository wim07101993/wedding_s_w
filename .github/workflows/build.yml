name: Build

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  ANDROID_ARTIFACT: android
  IOS_ARTIFACT: iphone

jobs:
  getVersion:
    name: get version
    runs-on: ubuntu-latest
    outputs:
      fullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}
      majorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
  
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0
        
  # -----------------------------------------------
  # BUILD ANDROID
  # -----------------------------------------------
  
  buildAndroidAppBundle:
    name: build Android app-bundle ü§ñ
    runs-on: ubuntu-latest
    needs: getVersion
    env:
      ARTIFACT_PATH: wedding_s_w.aab
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Install flutter
        uses: subosito/flutter-action@v2
        
      - name: Setup Java JDK
        uses: actions/setup-java@v1
        with:
          java-version: 17
      
      - run: flutter doctor -v
      - run: flutter pub get
        working-directory: ./app

      - name: Configure Google services
        run: |
          echo "$GOOGLE_SERVICES_JSON" > app/google-services.json
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        working-directory: ./app/android

      - name: Configure Keystore
        run: |
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/upload-keystore.jks
          echo "file=upload-keystore.jks" >> key.properties
          echo "password=$KEYSTORE_PASSWORD" >> key.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
        env:
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
        working-directory: ./app/android
        
      - name: Build appbundle
        working-directory: ./app
        run: flutter build appbundle --build-name ${{ needs.getVersion.outputs.fullSemVer }} --build-number ${{ github.run_number }}
        
      - name: Stage artifact file
        run: mv ./app/build/app/outputs/bundle/release/app-release.aab ${{ env.ARTIFACT_PATH }}
        
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ANDROID_ARTIFACT }}
          path: ${{ env.ARTIFACT_PATH }}
          if-no-files-found: error
  
  buildAndroidApk:
    name: build Android apk ü§ñ
    runs-on: ubuntu-latest
    needs: getVersion
    env:
      ARTIFACT_PATH: wedding_s_w.apk
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Install flutter
        uses: subosito/flutter-action@v2
      
      - name: Setup Java JDK
        uses: actions/setup-java@v1
        with:
          java-version: 17
      
      - run: flutter doctor -v
        working-directory: ./app
      - run: flutter pub get
        working-directory: ./app
        
      - name: Configure Google services
        run: |
          echo "$GOOGLE_SERVICES_JSON" > app/google-services.json
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        working-directory: ./app/android

      - name: Configure Keystore
        run: |
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/upload-keystore.jks
          echo "file=upload-keystore.jks" >> key.properties
          echo "password=$KEYSTORE_PASSWORD" >> key.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
        env:
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
        working-directory: ./app/android
        
      - name: Build apk
        run: flutter build apk --build-name ${{ needs.getVersion.outputs.fullSemVer }} --build-number ${{ github.run_number }}
        working-directory: ./app
        
      - name: Stage artifact file
        run: mv ./app/build/app/outputs/flutter-apk/app-release.apk  ${{ env.ARTIFACT_PATH }}
        
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ANDROID_ARTIFACT }}
          path:  ${{ env.ARTIFACT_PATH }}
          if-no-files-found: error
  
  
  uploadToGooglePlay:
    name: upload to GooglePlay
    runs-on: ubuntu-latest
    needs: buildAndroidAppBundle
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.ANDROID_ARTIFACT }}

      - name: Create service_account.json
        run: echo '${{ secrets.PLAY_STORE_CONFIG_JSON }}' > service_account.json
        
      - name: Upload to Google Play
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: service_account.json
          packageName: com.wimvanlaer.wedding_s_w
          releaseFiles: wedding_s_w.aab
          status: completed
          track: internal

      
  # -----------------------------------------------
  # BUILD IOS
  # -----------------------------------------------
  
  buildIos:
    name: build iOS üçè
    runs-on: macos-latest
    needs: getVersion
    env:
      ARTIFACT_PATH: qr_code_generator.ipa
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Install flutter
        uses: subosito/flutter-action@v2.10.0
      
      - name: Import certificate and provisioning profile
        env:
          CERTIFICATE_BASE64: ${{ secrets.APPLE_DISTRIBUTION_CERT }}
          CERTIFICATE_PASSWORD: ${{ secrets.APPLE_DISTRIBUTION_CERT_PASSWORD }}
          PROFILE_BASE64: ${{ secrets.APPLE_PROVISIONING_PROFILE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/certificate.p12
          PROFILE_PATH=$RUNNER_TEMP/profile.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          echo import certificate and provisioning profile from secrets
          echo -n "$CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$PROFILE_BASE64" | base64 --decode -o $PROFILE_PATH

          echo create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          echo import certificate to keychain
          security import $CERTIFICATE_PATH -P "$CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          echo apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          
      - run: flutter doctor -v
      - run: flutter pub get
        working-directory: ./app
      
      - name: Build ipa
        run: flutter build ipa --release --build-name ${{ needs.getVersion.outputs.majorMinorPatch }} --build-number ${{ github.run_number }} --export-options-plist=ios/Runner/ExportOptions.plist
        working-directory: ./app

      - name: Stage artifact file
        run: mv app/build/ios/ipa/*.ipa  ${{ env.ARTIFACT_PATH }}
      
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: ${{ env.IOS_ARTIFACT }}
          path:  ${{ env.ARTIFACT_PATH }}
          if-no-files-found: error
          
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
